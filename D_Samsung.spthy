theory Samsung_AirTag

begin

builtins: diffie-hellman

functions:
	/* constant value */
	smartthings_const/0,
	bleAuthentication_const/0,
	privacy_const/0,
	poolsize_const/0,
	bound_const/0,
	unbound_const/0,
	
	yes_confirm_const/0,
    no_confirm_const/0,
	
	serial_number_const/0,
	/* device bt addresses */
	addrA_const/0,
	addrB_const/0,
	
	/* ECDH key exchange */
	gen/0,
	
	
	SHA256/1,
	AES_enc/3, AES_dec/3 [destructor],
	
	/* Samsung SmartTag key calculation */
	derive_encryption_key/2,
	derive_key/2,
	
	/* modify and derive private key from bt_addr */
	derive_prikey_from_sn/1,
	
	/* hash table */
	derive_hashed_sn/1,
	hash_table/1 [destructor],
	
	/* Calculate all id */
	get_id/4
	
equations:
	AES_dec(AES_enc(mes, k, v), k, v) = mes,
	hash_table(derive_hashed_sn(x)) = x
	
	
export queries:
"
set preciseActions = true.
"


let step0_set(isbound, ~ini_set) = 
	lock ~ini_set;
	lookup ~ini_set as ii in
	
	insert ~ini_set, <serial_number_const, isbound>;
	unlock ~ini_set;

	
	if isbound = bound_const then
		event other_bind(bound_const)


/* 1. pairing module */
let step1s(~ini_set, ~pre_app1 : channel) = 
	/* PK exchange */
	lock ~ini_set;
	lookup ~ini_set as iv in
	let <sn1, isbound> = iv in

	in(~pre_app1, <hashed_sn_p, rand>);
	
	let sn = hash_table(hashed_sn_p) in
	let pri_p = derive_prikey_from_sn(sn) in
	let pub_p = gen ^ pri_p in

	new ~pri_c;
	let pub_c = gen ^ ~pri_c in
	let dhkey_PC = pub_p ^ ~pri_c) in
	let encryption_key = derive_encryption_key(dhkey_PC, rand) in
	out(~pre_app1, <encryption_key, pub_c>);
	
	
	in(~pre_app1, sn_p_1: bitstring);
	if (sn1 = sn_p_1) && (isbound = bound_const) then (
		out(~pre_app1, bound_const)
	)
	else (
		out(~pre_app1, unbound_const)
	)


	/* id sharing */
	in(~pre_app1, <sn_p, encryption_key_c>);
	if (sn = sn_p) && (encryption_key = encryption_key_c) then (
		new ~privacy_iv;
		new ~privacy_seed;
		let privacy_poolsize = poolsize_const in
		new ~time_sync;
		out(~pre_app1, <~privacy_iv, ~privacy_seed, privacy_poolsize, ~time_sync>);
		let privacy_key = derive_key(encryption_key, privacy) in
		let id = get_id(privacy_key, ~privacy_iv, ~privacy_seed, privacy_poolsize) in
			0
	)
	

let step1c(~p1c, ~open_ch : channel, ~pre_app1 : channel) = 
	/* PK exchange */
	in(~open_ch, hashed_sn_p);
	new ~rand;
	
	
	out(~pre_app1, <hashed_sn_p, ~rand>);
	in(~pre_app1, <encryption_key, pub_c>);
	out(~open_ch, <~rand, pub_c>);

	/* authentication */
	let auth_key = derive_key(encryption_key, bleAuthentication_const) in
	new ~n1;
	out(~open_ch, ~n1);
	
	in(~open_ch, n2);
	let encrypted_nonce1 = AES_enc(smartthings_const, auth_key, n2) in
	out(~open_ch, encrypted_nonce1);
	
	in(~open_ch, encrypted_nonce2);
	let dec_mes_2 = AES_dec(encrypted_nonce2, auth_key, n1)) in
	
	if smartthings_const = dec_mes_2 then (
		let link_key = derive_key(encryption_key, n2) in
		in(~open_ch, encrypted_sn_p1);
		let sn_p1 = AES_dec(encrypted_sn_p1, link_key, n2) in
		out(~pre_app1, sn_p1);
		
		in(~pre_app1, isbound);
		
		if (isbound = unbound_const) then (
			/* id sharing */
			in(~open_ch, encrypted_sn_p);
			let sn_p = AES_dec(encrypted_sn_p, link_key, n2) in
			out(~pre_app1, (sn_p, encryption_key));
			in(~pre_app1, <privacy_iv, privacy_seed, privacy_poolsize, time_sync>);

			let encrypted_iv = AES_enc(privacy_iv, link_key, n2) in
			let encrypted_seed = AES_enc(privacy_seed, link_key, n2) in
			let encrypted_poolsize = AES_enc(privacy_poolsize, link_key, n2) in
			let encrypted_time = AES_enc(time_sync, link_key, n2) in
			
			out(~open_ch, <encrypted_iv, encrypted_seed, encrypted_poolsize, encrypted_time>);
			let privacy_key = derive_key(encryption_key, privacy_const) in
			let id = get_id(privacy_key, privacy_iv, privacy_seed, privacy_poolsize) in
			
			lock ~p1c;
			lookup ~p1c as p1ci in
			
			insert ~p1c, <addrB, id>;
			unlock ~p1c
		)
	)


let step1p(~p1p, ~open_ch : channel) = 
	let sn = serial_number_const in
	let hashed_sn = derive_hashed_sn(sn) in
	let pri_p = derive_prikey_from_sn(sn) in
	let pub_p = gen ^ pri_p in

	out(~open_ch, hashed_sn);
	in(open_ch, <rand, pub_c>);
	let dhkey_CP = pub_c ^ pri_p in
	let encryption_key = derive_encryption_key(dhkey_CP, rand) in
	 
	/* authentication stage 1 */
	let auth_key = derive_key(encryption_key, bleAuthentication_const) in
	new ~n2;
	
	in(~open_ch, n1);
	out(~open_ch, ~n2);
	
	let encrypted_nonce2 = AES_enc(smartthings_const, auth_key, n1) in
	out(~open_ch, encrypted_nonce2);
	
	in(~open_ch, encrypted_nonce1);
	let dec_mes_1 = AES_dec(encrypted_nonce1, auth_key, ~n2) in
	
	if smartthings_const = dec_mes_1 then (
		let link_key = derive_key(encryption_key, ~n2) in
		out(~open_ch, AES_enc(sn, link_key, n2));

		/* id sharing */
		out(~open_ch, AES_enc(sn, link_key, n2));
		in(~open_ch, <encrypted_iv, encrypted_seed, encrypted_poolsize, encrypted_time>);
		
		let privacy_iv = AES_dec(encrypted_iv, link_key, n2) in
		let privacy_seed = AES_dec(encrypted_seed, link_key, n2) in
		let privacy_poolsize = AES_dec(encrypted_poolsize, link_key, n2) in
		let time_sync = AES_dec(encrypted_time, link_key, n2) in
		
		let privacy_key = derive_key(encryption_key, privacy_const) in
		let id = get_id(privacy_key, privacy_iv, privacy_seed, privacy_poolsize) in
		
		lock ~p1p;
		lookup ~p1p as p1pi in
		
		insert ~p1p, <addrA_const, id>;
		unlock ~p1p;
	)


/* 2. user checking module */
let step2c(~s, ~p1c, ~open_ch : channel, ~central_user_data_out : channel, ~central_user_ui : channel) = 
	lock ~p1c;
	lookup ~p1c as p1c_item in
	let <=addrB_const, id> = p1c_item in
	out(~central_user_data_out, id);
	
	in(~central_user_ui, confirm);
	new ~tmp;
	if confirm = yes_confirm_const then
		out(~open_ch, <~tmp, AES_enc(~s, id, ~tmp)>)


let step2p(~s, ~p1p, ~peripheral_user_data_out : channel, peripheral_user_ui : channel) = 
	lock ~p1p;
	lookup ~p1p as p1p_item in
	let <=addrA, id> = p1p_item in
	out(~peripheral_user_data_out, id);
	
	in(~peripheral_user_ui, confirm);
	if confirm = yes_confirm_const then
		in(~open_ch, <tmp, enc_s>);
		let s1 = AES_dec(enc_s, id, tmp) in
		if ~s = s1 then
			event pair_success(id)


let user(~central_user_data_out : channel, ~peripheral_user_data_out : channel, ~central_user_ui : channel) = 
	in(central_user_data_out, id_c);
	in(peripheral_user_data_out, id_p);
	if id_c = id_p then (
	  	out(~central_user_ui, yes_confirm_const);
	  	out(~peripheral_user_ui, yes_confirm_const)
	)
	else (
		out(~central_user_ui, no_confirm_const);
  		out(~peripheral_user_ui, no_confirm_const)
	)



	
	
	
	
process:
	/* open channel for data communication between central device and peripheral device */
	new ~open_ch: channel;
	out(~open_ch);
	
	/* secure channel for data communication between cloud and pre-installed app in phone */
	new ~pre_app1: channel;

	/* secure channel for data communication while producing peripheral device */
	new ~secure_ch: channel;

	/* secure channels for user interaction with central and peripheral */
	new ~central_user_data_out: channel;
	new ~central_user_ui: channel;
	new ~peripheral_user_data_out: channel;
	new ~peripheral_user_ui: channel;
	
	new ~userA;
	new ~s;
	
	/* tables used to pass data between steps */
	new ~p0;
	insert ~p0, 'init';
	
	new ~p0p;
	insert ~p0p, 'init';
	
	new ~p1c;
	insert ~p1c, 'init';
	
	new ~p1p;
	insert ~p1p, 'init';
	
	new ~ini_set;
	insert ~ini_set, 'init';
	
	(	
		!step0_set(isbound, ~ini_set) |
		!step1s(~ini_set, ~pre_app1) |
		!step1c(~p1c, ~open_ch, ~pre_app1) |
		!step1p(~p1p, ~open_ch) |
		!step2c(~s, ~p1c, ~open_ch, ~central_user_data_out, ~central_user_ui) |
		!step2p(~s, ~p1p, ~peripheral_user_data_out, peripheral_user_ui) |
		!user(~central_user_data_out, ~peripheral_user_data_out, ~central_user_ui)
	)
	
lemma pair_consistency:
"
	All id #i #j.
		other_bind(unbound) ==> pair_success(id).
"

	
end

